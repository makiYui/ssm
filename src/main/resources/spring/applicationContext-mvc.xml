<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring启用注解驱动-->
    <mvc:annotation-driven/>

    <!--注解扫描，不会扫描@Service/@Repository的Bean-->
    <context:component-scan base-package="com.test.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--处理HTTP请求/资源/ 有效地服务在$ { webapproot } /资源/目录静态资源-->
    <mvc:default-servlet-handler />

    <!--静态资源-->
    <!-- 对静态资源文件的访问 支持访问WEB-INF目录 -->
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/jsp/**" location="/WEB-INF/view/" /><!--你要访问的文件目录-->

    <!--<bean id="logInterceptor" class="com.test.aspect.LogAspect"/>-->
    <!--强制使用gblib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口形式-->
    <!--<aop:config proxy-target-class="true"/>
    <aop:config>
        &lt;!&ndash;定义切面&ndash;&gt;
        <aop:aspect id="logAspect" ref="logInterceptor">
            &lt;!&ndash;定义切入点(配置com.test.controller下所有的类在调用之前会被拦截)&ndash;&gt;
            <aop:pointcut id="logPointCut" expression="execution(* com.test.controller.*.*(..))"/>
            <aop:before method="before()" pointcut-ref="logPointCut"/>
            <aop:after method="after()" pointcut-ref="logPointCut"/>
        </aop:aspect>
    </aop:config>-->

    <!--基于注解的方式来实现aop-->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

    <!--视图解析器-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
        <!--前缀-->
        <property name="prefix">
            <value>/WEB-INF/view</value>
        </property>
        <!--后缀-->
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>
</beans>